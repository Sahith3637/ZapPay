// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZapPay.Persistence.Context;

#nullable disable

namespace ZapPay.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609102712_AddBalanceToBankAccount")]
    partial class AddBalanceToBankAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ZapPay.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogId")
                        .HasName("PK__AuditLog__5E548648E986D3DC");

                    b.HasIndex("CreatedBy");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_AuditLogs_CreatedAt");

                    b.HasIndex(new[] { "UserId" }, "IX_AuditLogs_UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ifsc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("IFSC");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId")
                        .HasName("PK__BankAcco__349DA5A6ED6875B1");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_BankAccounts_IsDeleted");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastRetryAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TemplateId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TemplateParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E129A8EB024");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Otpverification", b =>
                {
                    b.Property<Guid>("Otpid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OTPId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Otptype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OTPType");

                    b.Property<string>("Otpvalue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OTPValue");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Otpid")
                        .HasName("PK__OTPVerif__5C2EC4823CCCCC83");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "ContactValue" }, "IX_OTPVerifications_ContactValue");

                    b.HasIndex(new[] { "Status" }, "IX_OTPVerifications_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_OTPVerifications_UserId");

                    b.ToTable("OTPVerifications");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.QrcodeDetail", b =>
                {
                    b.Property<Guid>("QrcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QRCodeId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QrcodeData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QRCodeData");

                    b.Property<string>("QrcodeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("QRCodeType");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QrcodeId")
                        .HasName("PK__QRCodeDe__62FECD92773FD50C");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Status" }, "IX_QRCodeDetails_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_QRCodeDetails_UserId");

                    b.ToTable("QRCodeDetails");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.SystemUser", b =>
                {
                    b.Property<Guid>("SystemUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SystemUserId")
                        .HasName("PK__SystemUs__8788C295745FB76A");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("INR");

                    b.Property<string>("DestinationIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DestinationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRefund")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NpcireferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NPCIReferenceId");

                    b.Property<Guid?>("OriginalTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QrcodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QRCodeId");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SourceIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A6BCCAF6897");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Transactions_CreatedAt");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_Transactions_IsDeleted");

                    b.HasIndex(new[] { "OriginalTransactionId" }, "IX_Transactions_OriginalTransactionId");

                    b.HasIndex(new[] { "QrcodeId" }, "IX_Transactions_QRCodeId");

                    b.HasIndex(new[] { "ReferenceId" }, "IX_Transactions_ReferenceId");

                    b.HasIndex(new[] { "Status" }, "IX_Transactions_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_Transactions_UserId");

                    b.HasIndex(new[] { "ReferenceId" }, "UQ_Transactions_ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.TransactionLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogId")
                        .HasName("PK__Transact__5E548648EA8E8B75");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionLogs");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Upimandate", b =>
                {
                    b.Property<Guid>("MandateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MandateId")
                        .HasName("PK__UPIManda__A5A5EC654A41F8B0");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Status" }, "IX_UPIMandates_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_UPIMandates_UserId");

                    b.HasIndex(new[] { "ReferenceId" }, "UQ_UPIMandates_ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("UPIMandates");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Kycstatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("KYCStatus");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CA8092BC3");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_Users_IsDeleted");

                    b.HasIndex(new[] { "MobileNumber" }, "IX_Users_MobileNumber");

                    b.HasIndex(new[] { "Status" }, "IX_Users_Status");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "MobileNumber" }, "UQ_Users_MobileNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.UserKyc", b =>
                {
                    b.Property<Guid>("Kycid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("KYCId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationRemarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Kycid")
                        .HasName("PK__UserKYC__4ED3C4C9FC2C450E");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_UserKYC_IsDeleted");

                    b.HasIndex(new[] { "RetryCount", "LastAttemptAt" }, "IX_UserKYC_RetryCount");

                    b.ToTable("UserKYC");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId")
                        .HasName("PK__UserSess__C9F49290E487B185");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Status" }, "IX_UserSessions_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_UserSessions_UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.VirtualPaymentAddress", b =>
                {
                    b.Property<Guid>("Vpaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VPAId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vpa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("VPA");

                    b.HasKey("Vpaid")
                        .HasName("PK__VirtualP__3A2D0D5BBFF2D802");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_VPA_IsDeleted");

                    b.HasIndex(new[] { "Vpa" }, "UQ_VPA_Address")
                        .IsUnique();

                    b.ToTable("VirtualPaymentAddresses");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("AuditLogs")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_AuditLogs_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AuditLogs_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("BankAccountCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_BankAccounts_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("BankAccountUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_BankAccounts_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BankAccounts_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Notification", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Otpverification", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("OtpverificationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_OTPVerifications_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("OtpverificationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_OTPVerifications_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("Otpverifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_OTPVerifications_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.QrcodeDetail", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("QrcodeDetailCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_QRCodeDetails_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("QrcodeDetailUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_QRCodeDetails_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("QrcodeDetails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_QRCodeDetails_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.SystemUser", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SystemUsers_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_SystemUsers_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("TransactionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.Transaction", "OriginalTransaction")
                        .WithMany("InverseOriginalTransaction")
                        .HasForeignKey("OriginalTransactionId")
                        .HasConstraintName("FK_Transactions_OriginalTransaction");

                    b.HasOne("ZapPay.Domain.Entities.QrcodeDetail", "Qrcode")
                        .WithMany("Transactions")
                        .HasForeignKey("QrcodeId")
                        .HasConstraintName("FK_Transactions_QRCode");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("TransactionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("OriginalTransaction");

                    b.Navigation("Qrcode");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.TransactionLog", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("TransactionLogs")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionLogs_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.Transaction", "Transaction")
                        .WithMany("TransactionLogs")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionLogs_Transactions");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Upimandate", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("UpimandateCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UPIMandates_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("UpimandateUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UPIMandates_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("Upimandates")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UPIMandates_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.User", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("UserCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Users_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("UserUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Users_UpdatedBy");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.UserKyc", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("UserKycCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UserKYC_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("UserKycUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UserKYC_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("UserKycs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserKYC_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("UserSessionCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UserSessions_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("UserSessionUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_UserSessions_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSessions_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.VirtualPaymentAddress", b =>
                {
                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "CreatedByNavigation")
                        .WithMany("VirtualPaymentAddressCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_VPA_CreatedBy");

                    b.HasOne("ZapPay.Domain.Entities.SystemUser", "UpdatedByNavigation")
                        .WithMany("VirtualPaymentAddressUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_VPA_UpdatedBy");

                    b.HasOne("ZapPay.Domain.Entities.User", "User")
                        .WithMany("VirtualPaymentAddresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_VPA_Users");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.QrcodeDetail", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.SystemUser", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BankAccountCreatedByNavigations");

                    b.Navigation("BankAccountUpdatedByNavigations");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("Notifications");

                    b.Navigation("OtpverificationCreatedByNavigations");

                    b.Navigation("OtpverificationUpdatedByNavigations");

                    b.Navigation("QrcodeDetailCreatedByNavigations");

                    b.Navigation("QrcodeDetailUpdatedByNavigations");

                    b.Navigation("TransactionCreatedByNavigations");

                    b.Navigation("TransactionLogs");

                    b.Navigation("TransactionUpdatedByNavigations");

                    b.Navigation("UpimandateCreatedByNavigations");

                    b.Navigation("UpimandateUpdatedByNavigations");

                    b.Navigation("UserCreatedByNavigations");

                    b.Navigation("UserKycCreatedByNavigations");

                    b.Navigation("UserKycUpdatedByNavigations");

                    b.Navigation("UserSessionCreatedByNavigations");

                    b.Navigation("UserSessionUpdatedByNavigations");

                    b.Navigation("UserUpdatedByNavigations");

                    b.Navigation("VirtualPaymentAddressCreatedByNavigations");

                    b.Navigation("VirtualPaymentAddressUpdatedByNavigations");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("InverseOriginalTransaction");

                    b.Navigation("TransactionLogs");
                });

            modelBuilder.Entity("ZapPay.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BankAccounts");

                    b.Navigation("Notifications");

                    b.Navigation("Otpverifications");

                    b.Navigation("QrcodeDetails");

                    b.Navigation("Transactions");

                    b.Navigation("Upimandates");

                    b.Navigation("UserKycs");

                    b.Navigation("UserSessions");

                    b.Navigation("VirtualPaymentAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
